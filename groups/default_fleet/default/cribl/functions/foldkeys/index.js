exports.name="Fold Keys";exports.version="0.2";exports.handleSignals=false;exports.group="Advanced";exports.sync=true;let deleteOriginal;let separator;let selectionRegExp;exports.init=e=>{const t=e?.conf||{};deleteOriginal=t.deleteOriginal??true;separator=t.separator??".";if(t.selectionRegExp){const e=t.selectionRegExp.match(/\/([^\/]+)\/([gimsuy]*)/);if(e?.length>1){selectionRegExp=new RegExp(e[1],e[2]??"")}else{selectionRegExp=new RegExp(t.selectionRegExp)}}};exports.process=e=>{if(!e)return e;return fold(e)};function fold(e){const t=Object.keys(e);for(let l=0;l<t.length;++l){const n=t[l];const o=e[n];if(selectionRegExp==null||selectionRegExp.test(n)){const t=n.split(separator);if(t.length>1){let l=e;for(let e=0;e<t.length-1;++e){const n=t[e];let o=l[n];if(o==null){o=Object.create(null);l[n]=o}else if(typeof o!=="object"){o={[`original_${n}`]:o}}l=o}l[t[t.length-1]]=o;if(deleteOriginal)e[n]=undefined}}if(o!==null&&typeof o==="object"){fold(o)}}return e}