exports.name="Publish Metrics";exports.version="0.3";exports.group="Advanced";exports.sync=true;const cLogger=C.util.getLogger("func:publish_metrics");const{NestedPropertyAccessor}=C.expr;let _metricsConf;let _metricsToRemoveConf;let _dimensionsToAddConf;let _dimensionsToRemoveConf;let overwrite=false;exports.init=e=>{_metricsConf=undefined;_metricsToRemoveConf=undefined;_dimensionsToAddConf=undefined;_dimensionsToRemoveConf=undefined;const i=e.conf||{};if(i.fields){_metricsConf={values:[],nameExpr:[],types:[]};for(const e of i.fields){if(e&&e.inFieldName&&e.metricType){new NestedPropertyAccessor(e.inFieldName.trim());_metricsConf.values.push(e.inFieldName.trim());const i=e.metricType==="summary"||e.metricType==="histogram"?"_metric":e.inFieldName.trim();e.outFieldExpr=e.outFieldExpr?e.outFieldExpr.trim():i;_metricsConf.nameExpr.push(e.outFieldExpr);_metricsConf.types.push(e.metricType)}}_metricsConf=_metricsConf.values.length?_metricsConf:undefined}overwrite=Boolean(i.overwrite);_metricsToRemoveConf=parseConf(i.removeMetrics,(e=>new C.util.WildcardList(Array.from(e))));_dimensionsToAddConf=parseConf(i.dimensions,(e=>Array.from(e)));_dimensionsToRemoveConf=parseConf(i.removeDimensions,(e=>new C.util.WildcardList(Array.from(e))));cLogger.info("Function initialized",{overwrite,_metricsConf,_dimensionsToAddConf,_dimensionsToRemoveConf})};function parseConf(e,i){let o;if(e){o=new Set;for(let i of e){i=i?i.trim():"";if(i)o.add(i)}o=o.size?i(o):undefined}return o}exports.unload=()=>{_metricsConf=undefined;_metricsToRemoveConf=undefined;_dimensionsToAddConf=undefined;_dimensionsToRemoveConf=undefined;overwrite=false};exports.process=e=>{if(_metricsConf===undefined&&_metricsToRemoveConf===undefined&&_dimensionsToAddConf===undefined&&_dimensionsToRemoveConf===undefined){return e}if(_metricsConf&&e.__criblMetrics&&Array.isArray(e.__criblMetrics)&&!overwrite){e.__criblMetrics.push(_metricsConf)}else if(_metricsConf){e.__criblMetrics=[_metricsConf]}if(e.__criblMetrics&&(_metricsToRemoveConf||_dimensionsToAddConf||_dimensionsToRemoveConf)){const i=[];for(let o=0;o<e.__criblMetrics.length;o++){let n=e.__criblMetrics[o];let s={values:[],nameExpr:[],types:[]};for(let e=0;e<n.values.length;e++){if(!_metricsToRemoveConf||!_metricsToRemoveConf.test(n.values[e])){if(n.nameExpr!=null)s.nameExpr.push(n.nameExpr[e]);s.values.push(n.values[e]);s.types.push(n.types[e])}}if(!s.values.length){continue}let r=[...n.dims||[]];if(_dimensionsToAddConf){if(overwrite){r=[..._dimensionsToAddConf]}else if(_metricsConf==null){r=Array.from(new Set([...r,..._dimensionsToAddConf]))}else if(_metricsConf&&o===e.__criblMetrics.length-1){r=[..._dimensionsToAddConf]}}if(_dimensionsToRemoveConf&&r.length){r=r.filter((e=>!_dimensionsToRemoveConf.test(e)))}const{dims:t,values:m,nameExpr:f,types:d,__metricAccessor:c,..._}=n;s={...s,..._};if(r.length)s.dims=r;i.push(s)}e.__criblMetrics=i.length?i:undefined}return e};